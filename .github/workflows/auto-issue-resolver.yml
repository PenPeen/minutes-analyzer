name: Auto Issue Resolver

on:
  schedule:
    # 日本時間 00:00-07:00 の間、30分ごとに実行 (UTC時間で設定)
    - cron: '0,30 15-21 * * *'  # UTC 15:00-21:30 = JST 00:00-06:30
    - cron: '0 22 * * *'        # UTC 22:00 = JST 07:00
  workflow_dispatch:  # 手動実行も可能にする

jobs:
  process-issue:
    runs-on: ubuntu-latest
    steps:
      - name: Find and process highest priority issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            // 優先度の定義
            const priorities = ['high', 'middle', 'low'];
            
            // claude-code-requestedラベルが付いていないissueを優先度順に検索
            let selectedIssue = null;
            
            for (const priority of priorities) {
              const issues = await github.rest.issues.listForRepo({
                owner,
                repo,
                labels: priority,
                state: 'open',
                sort: 'created',
                direction: 'asc'
              });
              
              // claude-code-requestedラベルが付いていない最初のissueを探す
              for (const issue of issues.data) {
                const hasProcessedLabel = issue.labels.some(
                  label => label.name === 'claude-code-requested'
                );
                
                if (!hasProcessedLabel) {
                  selectedIssue = issue;
                  break;
                }
              }
              
              if (selectedIssue) break;
            }
            
            // 処理対象のissueが見つからない場合
            if (!selectedIssue) {
              console.log('No unprocessed issues found');
              return;
            }
            
            console.log(`Processing issue #${selectedIssue.number}: ${selectedIssue.title}`);
            
            // issueの詳細情報を取得
            const issueDetails = await github.rest.issues.get({
              owner,
              repo,
              issue_number: selectedIssue.number
            });
            
            // Claude Codeへのリクエストコメントを作成
            const comment = `@claude このIssueを解決してください。

## Issue詳細
**タイトル**: ${selectedIssue.title}
**説明**: 
${selectedIssue.body || '説明なし'}

## 要件
1. 問題を分析して、適切な解決策を実装してください
2. 必要に応じてテストコードも作成してください
3. 変更内容を含むPull Requestを作成してください

## 注意事項
- 既存のコードベースの規約に従ってください
- CLAUDE.mdファイルの指示に従ってください
- セキュリティとパフォーマンスを考慮してください`;
            
            // コメントを投稿
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: selectedIssue.number,
              body: comment
            });
            
            // claude-code-requestedラベルを追加
            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: selectedIssue.number,
              labels: ['claude-code-requested']
            });
            
            console.log(`Successfully processed issue #${selectedIssue.number}`);